"""Add image functions and views

Revision ID: fd82da900fd2
Revises: 399417106d8c
Create Date: 2021-11-11 23:49:58.312911

"""
# flake8: noqa -- FIXME!!
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_extension import PGExtension
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_materialized_view import PGMaterializedView
from sqlalchemy import text as sql_text


# revision identifiers, used by Alembic.
revision = "fd82da900fd2"
down_revision = "399417106d8c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_image_popularity_percentile = PGFunction(
        schema="public",
        signature="image_popularity_percentile(provider text, pop_field text, percentile float)",
        definition="RETURNS FLOAT AS $$\n  SELECT percentile_disc($3) WITHIN GROUP (\n    ORDER BY (meta_data->>$2)::float\n  )\n  FROM image WHERE provider=$1;\n$$\nLANGUAGE SQL\nSTABLE\nRETURNS NULL ON NULL INPUT",
    )
    op.create_entity(public_image_popularity_percentile)

    public_image_popularity_constants = PGMaterializedView(
        schema="public",
        signature="image_popularity_constants",
        definition="WITH popularity_metric_values AS (\n    SELECT\n    *,\n    image_popularity_percentile(provider, metric, percentile) AS val\n    FROM image_popularity_metrics\n)\nSELECT *, ((1 - percentile) / percentile) * val AS constant\nFROM popularity_metric_values",
        with_data=True,
    )

    op.create_entity(public_image_popularity_constants)

    public_standardized_image_popularity = PGFunction(
        schema="public",
        signature="standardized_image_popularity(provider text, meta_data jsonb)",
        definition="RETURNS FLOAT AS $$\n  SELECT ($2->>metric)::FLOAT / (($2->>metric)::FLOAT + constant)\n  FROM image_popularity_constants WHERE provider=$1;\n$$\nLANGUAGE SQL\nSTABLE\nRETURNS NULL ON NULL INPUT",
    )
    op.create_entity(public_standardized_image_popularity)

    public_image_view = PGMaterializedView(
        schema="public",
        signature="image_view",
        definition="SELECT\nidentifier,\ncreated_on,\nupdated_on,\ningestion_type,\nprovider,\nsource,\nforeign_identifier,\nforeign_landing_url,\nurl,\nthumbnail,\nwidth,\nheight,\nfilesize,\nlicense,\nlicense_version,\ncreator,\ncreator_url,\ntitle,\nmeta_data,\ntags,\nwatermarked,\nlast_synced_with_source,\nremoved_from_source,\nfiletype,\ncategory,\nstandardized_image_popularity(\n  image.provider, image.meta_data\n) AS standardized_popularity\nFROM image",
        with_data=True,
    )

    op.create_entity(public_image_view)

    # TODO: Add this to the first migration explicitly
    public_uuid_ossp = PGExtension(schema="public", signature="uuid-ossp")
    op.drop_entity(public_uuid_ossp)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_uuid_ossp = PGExtension(schema="public", signature="uuid-ossp")
    op.create_entity(public_uuid_ossp)

    public_image_view = PGMaterializedView(
        schema="public",
        signature="image_view",
        definition="SELECT\nidentifier,\ncreated_on,\nupdated_on,\ningestion_type,\nprovider,\nsource,\nforeign_identifier,\nforeign_landing_url,\nurl,\nthumbnail,\nwidth,\nheight,\nfilesize,\nlicense,\nlicense_version,\ncreator,\ncreator_url,\ntitle,\nmeta_data,\ntags,\nwatermarked,\nlast_synced_with_source,\nremoved_from_source,\nfiletype,\ncategory,\nstandardized_image_popularity(\n  image.provider, image.meta_data\n) AS standardized_popularity\nFROM image",
        with_data=True,
    )

    op.drop_entity(public_image_view)

    public_standardized_image_popularity = PGFunction(
        schema="public",
        signature="standardized_image_popularity(provider text, meta_data jsonb)",
        definition="RETURNS FLOAT AS $$\n  SELECT ($2->>metric)::FLOAT / (($2->>metric)::FLOAT + constant)\n  FROM image_popularity_constants WHERE provider=$1;\n$$\nLANGUAGE SQL\nSTABLE\nRETURNS NULL ON NULL INPUT",
    )
    op.drop_entity(public_standardized_image_popularity)

    public_image_popularity_constants = PGMaterializedView(
        schema="public",
        signature="image_popularity_constants",
        definition="WITH popularity_metric_values AS (\n    SELECT\n    *,\n    image_popularity_percentile(provider, metric, percentile) AS val\n    FROM image_popularity_metrics\n)\nSELECT *, ((1 - percentile) / percentile) * val AS constant\nFROM popularity_metric_values",
        with_data=True,
    )

    op.drop_entity(public_image_popularity_constants)

    public_image_popularity_percentile = PGFunction(
        schema="public",
        signature="image_popularity_percentile(provider text, pop_field text, percentile float)",
        definition="RETURNS FLOAT AS $$\n  SELECT percentile_disc($3) WITHIN GROUP (\n    ORDER BY (meta_data->>$2)::float\n  )\n  FROM image WHERE provider=$1;\n$$\nLANGUAGE SQL\nSTABLE\nRETURNS NULL ON NULL INPUT",
    )
    op.drop_entity(public_image_popularity_percentile)

    # ### end Alembic commands ###
